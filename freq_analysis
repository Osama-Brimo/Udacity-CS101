# Crypto Analysis: Frequency Analysis
#
# To analyze encrypted messages, to find out information about the possible 
# algorithm or even language of the clear text message, one could perform 
# frequency analysis. This process could be described as simply counting 
# the number of times a certain symbol occurs in the given text. 
# For example:
# For the text "test" the frequency of 'e' is 1, 's' is 1 and 't' is 2.
#
# The input to the function will be an encrypted body of text that only contains 
# the lowercase letters a-z. 
# As output you should return a list of the normalized frequency 
# for each of the letters a-z. 
# The normalized frequency is simply the number of occurrences, i, 
# divided by the total number of characters in the message, n.

def freq_analysis(message):
    freq_list=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    msg_list=[]
    i=0
    occurences=0.0
    while i!=len(message):
        msg_list.append(message[i])
        i+=1
    i=0    
    while i!=len(message):
        current_letter=msg_list[i]
        if current_letter in freq_list:
            for letter in msg_list:
                if letter==current_letter:
                    occurences+=1.0
            freq_list[freq_list.index(current_letter)]=occurences/len(message)        
            occurences=0.0
        i+=1     
    for letter in freq_list:
        if type(letter) == (str):
            freq_list[freq_list.index(letter)]=0.0
        else:
            None
    return freq_list



#Tests

print freq_analysis("abcd")
#>>> [0.25, 0.25, 0.25, 0.25, 0.0, ..., 0.0]

print freq_analysis("adca")
#>>> [0.5, 0.0, 0.25, 0.25, 0.0, ..., 0.0]

print freq_analysis('bewarethebunnies')
#>>> [0.0625, 0.125, 0.0, 0.0, ..., 0.0]
